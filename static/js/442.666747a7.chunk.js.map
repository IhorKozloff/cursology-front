{"version":3,"file":"static/js/442.666747a7.chunk.js","mappings":"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","sources":["components/AuthForms/AuthForms.tsx","pages/AuthPage.tsx"],"sourcesContent":["import './AuthForms.css'; \r\nimport { Formik, Form, Field } from 'formik';\r\nimport { SiMaildotru } from 'react-icons/si';\r\nimport { RiLockPasswordLine } from 'react-icons/ri';\r\nimport { TbUser } from 'react-icons/tb';\r\nimport { FiCheckCircle } from 'react-icons/fi';\r\nimport { IUserAuth } from 'interfaces';\r\nimport { PropagateLoader, HashLoader } from 'react-spinners';\r\nimport { ModalWindowBackdrop } from 'components';\r\n\r\ninterface IProps {\r\n    onLoginSubmit: (userAuthData:Pick<IUserAuth, 'email' | 'password'>) => void;\r\n    onRegisterSubmit: (userAuthData: Pick<IUserAuth, 'email' | 'password' | 'name'>) => void;\r\n    onOkBtnClick: () => void;\r\n    registerSuccess: boolean;\r\n    registerLoading: boolean;\r\n    loginLoading: boolean;\r\n}\r\nexport const AuthForms = ({onLoginSubmit, onRegisterSubmit, onOkBtnClick, registerSuccess, registerLoading, loginLoading}: IProps) => {\r\n\r\n    const initialLogIn: Pick<IUserAuth, 'email' | 'password'> = {\r\n        email: '',\r\n        password: ''\r\n    };\r\n    const initialRegister: Pick<IUserAuth, 'email' | 'password' | 'name'> = {\r\n        email: '',\r\n        password: '',\r\n        name: ''\r\n    };\r\n\r\n    return (\r\n        <div className=\"authFormsWrapper relative z-50\">\r\n            <div className=\"section\">\r\n                <div className=\"container mx-auto ralative\">\r\n                    {registerSuccess && registerLoading === false && loginLoading && \r\n                    <div className=\"absolute top-0 left-0 w-full h-full flex-center-center bg-[#1f2029] z-50\">\r\n                        <HashLoader color=\"#fff\"/>\r\n                    </div>                 \r\n                    }\r\n                    <div className=\"row full-height justify-content-center\">\r\n                        <div className=\"col-12 text-center align-self-center py-5\">\r\n                            <div className=\"section pb-5 pt-5 pt-sm-2 text-center\">\r\n                                <h6 className=\"mb-0 pb-3\"><span>Log In </span><span>Sign Up</span></h6>\r\n                                <input className=\"checkbox\" type=\"checkbox\" id=\"reg-log\" name=\"reg-log\"/>\r\n                                <label htmlFor=\"reg-log\"></label>\r\n                                <div className=\"card-3d-wrap mx-auto\">\r\n                                    <div className=\"card-3d-wrapper\">\r\n                                        <div className=\"card-front\">\r\n                                            <div className=\"center-wrap\">\r\n                                                <div className=\"section text-center\">\r\n                                                    {loginLoading === false && <h4 className=\"mb-4 pb-3\">Log In</h4>}\r\n                                                    <Formik initialValues={initialLogIn} onSubmit={(values, actions) => {\r\n                                                        onLoginSubmit(values);\r\n                                                        actions.resetForm();\r\n                                                    }}> \r\n                                                        <Form>\r\n                                                            {loginLoading === false &&\r\n                                                                <>\r\n                                                                    <div className=\"relative mb-2\">\r\n                                                                        <Field type=\"email\" name=\"email\" className=\"form-style\" placeholder=\"Your Email\" id=\"logemail\" autoComplete=\"off\"/>\r\n                                                                        <div>\r\n                                                                            <SiMaildotru className=\"input-icon\"/>\r\n                                                                        </div>\r\n                                                                    </div>\t\r\n                                                                    <div className=\"relative\">\r\n                                                                        <Field type=\"text\" name=\"password\" className=\"form-style\" placeholder=\"Your Password\" id=\"logpass\" autoComplete=\"off\"/>\r\n                                                                        <div>\r\n                                                                            <RiLockPasswordLine className=\"input-icon uil\"/>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    <button type=\"submit\" className=\"btn mt-4\">submit</button>\r\n                                                                </>\r\n                                                            }\r\n                                                            {loginLoading &&\r\n\r\n                                                                <div className=\"h-[230px] text-Green uppercase flex-center-center flex-col\">\r\n                                                                    <PropagateLoader color=\"#36d7b7\" />\r\n                                                                </div>\r\n                                                            }\r\n                                                        </Form>\r\n                                                    </Formik>\r\n                                                    {loginLoading === false &&<p className=\"mb-0 mt-4 text-center\"><a href=\"#0\" className=\"link\">Forgot your password?</a></p>}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"card-back\">\r\n                                            <div className=\"center-wrap\">\r\n                                                <div className=\"section text-center\">\r\n                                                    {registerLoading === false && (registerSuccess ? <h4 className=\"mb-4 pb-3\">Great!</h4> : <h4 className=\"mb-4 pb-3\">Sign Up</h4>)}\r\n                                                    <Formik initialValues={initialRegister} onSubmit={(values, actions) => {\r\n                                                        onRegisterSubmit(values);\r\n                                                        actions.resetForm();\r\n                                                    }}>\r\n                                                        <Form>\r\n                                                            {registerSuccess === false && registerLoading === false &&\r\n                                                                <>\r\n                                                                    <div className=\"relative mb-2\">\r\n                                                                        <Field type=\"text\" name=\"name\" className=\"form-style\" placeholder=\"Your Full Name\" id=\"regname\" autoComplete=\"off\"/>\r\n                                                                        <div>\r\n                                                                            <TbUser className=\"input-icon\"/>\r\n                                                                        </div>\r\n                                                                    </div>\t\r\n                                                                    <div className=\"relative mb-2\">\r\n                                                                        <Field type=\"email\" name=\"email\" className=\"form-style\" placeholder=\"Your Email\" id=\"regemail\" autoComplete=\"off\"/>\r\n                                                                        <div>\r\n                                                                            <SiMaildotru className=\"input-icon\"/>\r\n                                                                        </div>\r\n                                                                    </div>\t\r\n                                                                    <div className=\"relative\">\r\n                                                                        <Field type=\"text\" name=\"password\" className=\"form-style\" placeholder=\"Your Password\" id=\"regpass\" autoComplete=\"off\"/>\r\n                                                                        <div>\r\n                                                                            <RiLockPasswordLine className=\"input-icon\"/>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </>\r\n                                                            }\r\n                                                            {registerSuccess === false && registerLoading &&\r\n                                                                <div className=\"h-[230px] text-Green uppercase\r\n                                                                 flex-center-center flex-col\">\r\n                                                                    <PropagateLoader color=\"#36d7b7\" />\r\n                                                                </div>\r\n                                                            }\r\n                                                            \r\n                                                            {registerSuccess && registerLoading === false &&\r\n                                                              \r\n                                                                    <div className=\"h-[230px] text-Green uppercase\r\n                                                                    flex flex-col items-center\">\r\n                                                                        <FiCheckCircle size={80}/>\r\n                                                                        <h4 className=\"text-GreenLight my-6\">Congratulations</h4>\r\n                                                                        <p className=\"text-[#ffeba7]\">Your registration has been successful</p>\r\n                                                                        <ModalWindowBackdrop></ModalWindowBackdrop>\r\n                                                                    </div>\r\n                                                             \r\n                                                            }\r\n                                                            {registerLoading === false && (registerSuccess ? <button type=\"button\" className=\"btn\" onClick={onOkBtnClick}>Ok</button> : <button type=\"submit\" className=\"btn mt-4\">submit</button>)}\r\n                                                            \r\n                                                        </Form>\r\n                                                    </Formik>\r\n                                                </div>\r\n                                                \r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    );\r\n};","import { AuthForms } from '../components/AuthForms/AuthForms';\r\nimport { IUserAuth } from 'interfaces';\r\nimport { useRegisterMutation, useLoginMutation, onLogInSuccess, setLessonsProgressData, setLikedCoursesServerData } from 'store';\r\nimport { useEffect, useState } from 'react';\r\nimport { useAppDispatch } from 'hooks';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {  toast } from 'react-toastify';\r\n\r\ninterface IErrorData {\r\n    status: number,\r\n    message: string\r\n}\r\n\r\nexport default function AuthPage () {\r\n    const dispatch = useAppDispatch();\r\n    const navigate = useNavigate();\r\n    const [registerData, setRegisterData] = useState<Pick<IUserAuth, 'email' | 'password' | 'name'> | null>(null);\r\n\r\n    const [fetchRegister, registerResult] = useRegisterMutation();\r\n    const [fetchLogin, loginResult] = useLoginMutation();\r\n\r\n    useEffect(() => {\r\n        if(loginResult.isSuccess) {\r\n\r\n            dispatch(onLogInSuccess(loginResult.data));\r\n            dispatch(setLessonsProgressData(loginResult.data.lessonsProgress));\r\n            dispatch(setLikedCoursesServerData(loginResult.data.liked_courses_ids));\r\n\r\n            navigate('/');\r\n        }\r\n        \r\n    },[dispatch, loginResult.data, loginResult.isSuccess, navigate]);\r\n\r\n    useEffect(() => {\r\n\r\n        if(loginResult.error !== undefined && 'data' in loginResult.error) {\r\n\r\n            try {\r\n                toast.error(`${(loginResult.error.data as IErrorData).message}`, {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } catch {\r\n                toast.error('Oops, something wrong. Check your data please.', {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } finally {\r\n                loginResult.reset();\r\n            }\r\n            \r\n        }\r\n    });\r\n    useEffect(() => {\r\n        if(registerResult.error !== undefined && 'data' in registerResult.error) {\r\n\r\n            try {\r\n                toast.error(`${(registerResult.error.data as IErrorData).message}`, {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } catch {\r\n                toast.error('Oops, something wrong. Check your data please.', {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            } finally {\r\n                registerResult.reset();\r\n            }\r\n            \r\n        }\r\n    });\r\n\r\n    const handleRegisterSuccessAfter = () => {\r\n        if(registerResult.isSuccess && registerData !== null) {\r\n            fetchLogin({\r\n                email: registerData.email,\r\n                password: registerData.password\r\n            });\r\n            setRegisterData(null);\r\n        }\r\n    };\r\n\r\n    const handleLoginSubmit = (userData: Pick<IUserAuth, 'email' | 'password'>) => {\r\n        fetchLogin(userData);\r\n    };\r\n\r\n    const handleRegisterSubmit = (userData: Pick<IUserAuth, 'email' | 'password' | 'name'>) => {\r\n        setRegisterData(userData);\r\n        fetchRegister(userData);\r\n    };\r\n\r\n    return (\r\n        <AuthForms \r\n            onLoginSubmit={handleLoginSubmit} \r\n            onRegisterSubmit={handleRegisterSubmit}\r\n            registerSuccess={registerResult.isSuccess}\r\n            registerLoading={registerResult.isLoading}\r\n            loginLoading={loginResult.isLoading}\r\n            onOkBtnClick={handleRegisterSuccessAfter}\r\n        />\r\n    );\r\n}"],"names":["AuthForms","onLoginSubmit","onRegisterSubmit","onOkBtnClick","registerSuccess","registerLoading","loginLoading","className","HashLoader","color","type","id","name","htmlFor","initialValues","email","password","onSubmit","values","actions","resetForm","placeholder","autoComplete","PropagateLoader","href","size","onClick","AuthPage","dispatch","useAppDispatch","navigate","useNavigate","useState","registerData","setRegisterData","useRegisterMutation","fetchRegister","registerResult","useLoginMutation","fetchLogin","loginResult","useEffect","isSuccess","onLogInSuccess","data","setLessonsProgressData","lessonsProgress","setLikedCoursesServerData","liked_courses_ids","undefined","error","toast","message","position","reset","userData","isLoading"],"sourceRoot":""}